
#ifndef FRV_FRVDEC_H_
#define FRV_FRVDEC_H_

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

enum FrvOptions {
  FRV_RV32 = 0 << 0,
  FRV_RV64 = 1 << 0,
  FRV_RV128 = 2 << 0,
  FRV_RVMSK = 3 << 0,
};
typedef enum FrvOptions FrvOptions;

enum {
  FRV_UNDEF = -1,
  FRV_PARTIAL = -2,
};

enum {
  FRV_REG_INV = (uint8_t) -1,
};

enum {
  FRV_INVALID = 0,
  // RV32I
  FRV_LB, FRV_LH, FRV_LW, FRV_LD, FRV_LBU, FRV_LHU, FRV_LWU,
  FRV_SB, FRV_SH, FRV_SW, FRV_SD,
  FRV_ADDI, FRV_SLLI, FRV_SLTI, FRV_SLTIU, FRV_XORI, FRV_SRAI, FRV_SRLI, FRV_ORI, FRV_ANDI,
  FRV_ADD, FRV_SLL, FRV_SLT, FRV_SLTU, FRV_XOR, FRV_SRL, FRV_OR, FRV_AND, FRV_SUB, FRV_SRA,
  FRV_FENCE, FRV_FENCEI,
  FRV_AUIPC, FRV_LUI,
  FRV_JAL, FRV_JALR,
  FRV_BEQ, FRV_BNE, FRV_BLT, FRV_BGE, FRV_BLTU, FRV_BGEU,
  FRV_ECALL,
  // RV64I
  FRV_ADDIW, FRV_SLLIW, FRV_SRAIW, FRV_SRLIW,
  FRV_ADDW, FRV_SLLW, FRV_SRLW, FRV_SUBW, FRV_SRAW,

  // RV32M, RV64M
  FRV_MUL, FRV_MULH, FRV_MULHSU, FRV_MULHU, FRV_DIV, FRV_DIVU, FRV_REM, FRV_REMU,
  FRV_MULW, FRV_DIVW, FRV_DIVUW, FRV_REMW, FRV_REMUW,

  // RV32A/RV64A
  FRV_LRW, FRV_SCW, FRV_LRD, FRV_SCD,
  FRV_AMOADDW, FRV_AMOSWAPW, FRV_AMOXORW, FRV_AMOORW, FRV_AMOANDW,
  FRV_AMOMINW, FRV_AMOMAXW, FRV_AMOMINUW, FRV_AMOMAXUW,
  FRV_AMOADDD, FRV_AMOSWAPD, FRV_AMOXORD, FRV_AMOORD, FRV_AMOANDD,
  FRV_AMOMIND, FRV_AMOMAXD, FRV_AMOMINUD, FRV_AMOMAXUD,

  // RV32/RV64 Zicsr
  FRV_CSRRW, FRV_CSRRS, FRV_CSRRC, FRV_CSRRWI, FRV_CSRRSI, FRV_CSRRCI,

  // RV32F/RV64F
  FRV_FLW, FRV_FSW, FRV_FMVXW, FRV_FMVWX, FRV_FCLASSS,
  FRV_FMADDS, FRV_FMSUBS, FRV_FNMSUBS, FRV_FNMADDS,
  FRV_FADDS, FRV_FSUBS, FRV_FMULS, FRV_FDIVS, FRV_FSQRTS,
  FRV_FSGNJS, FRV_FSGNJNS, FRV_FSGNJXS, FRV_FMINS, FRV_FMAXS,
  FRV_FLES, FRV_FLTS, FRV_FEQS,
  FRV_FCVTWS, FRV_FCVTWUS, FRV_FCVTLS, FRV_FCVTLUS,
  FRV_FCVTSW, FRV_FCVTSWU, FRV_FCVTSL, FRV_FCVTSLU,
  // RV32D/RV64D
  FRV_FLD, FRV_FSD, FRV_FMVXD, FRV_FMVDX, FRV_FCLASSD,
  FRV_FMADDD, FRV_FMSUBD, FRV_FNMSUBD, FRV_FNMADDD,
  FRV_FADDD, FRV_FSUBD, FRV_FMULD, FRV_FDIVD, FRV_FSQRTD,
  FRV_FSGNJD, FRV_FSGNJND, FRV_FSGNJXD, FRV_FMIND, FRV_FMAXD,
  FRV_FLED, FRV_FLTD, FRV_FEQD,
  FRV_FCVTSD, FRV_FCVTDS,
  FRV_FCVTWD, FRV_FCVTWUD, FRV_FCVTLD, FRV_FCVTLUD,
  FRV_FCVTDW, FRV_FCVTDWU, FRV_FCVTDL, FRV_FCVTDLU,

  // RV32/RV64 Zba
  FRV_SH1ADD, FRV_SH2ADD, FRV_SH3ADD,
  // RV64 Zba
  FRV_ADDUW, FRV_SH1ADDUW, FRV_SH2ADDUW, FRV_SH3ADDUW, FRV_SLLIUW,

  // RV32/RV64 Zbb
  FRV_ANDN, FRV_CLZ, FRV_CPOP, FRV_CTZ, FRV_MAX, FRV_MAXU, FRV_MIN, FRV_MINU,
  FRV_ORCB, FRV_ORN, FRV_REV8, FRV_ROL, FRV_ROR, FRV_RORI,
  FRV_SEXTB, FRV_SEXTH, FRV_XNOR, FRV_ZEXTH,
  // RV64 Zbb
  FRV_CLZW, FRV_CPOPW, FRV_CTZW, FRV_ROLW, FRV_RORW, FRV_RORIW,

  // RV32/RV64 Zbc
  FRV_CLMUL, FRV_CLMULH, FRV_CLMULR,

  // RV32/RV64 Zbs
  FRV_BCLR, FRV_BCLRI, FRV_BEXT, FRV_BEXTI, FRV_BINV, FRV_BINVI, FRV_BSET, FRV_BSETI,
};

typedef struct FrvInst FrvInst;
// Note: structure layout is unstable.
struct FrvInst {
  uint16_t mnem;
  uint8_t rd;
  uint8_t rs1;
  uint8_t rs2;
  uint8_t rs3;
  uint8_t misc;
  int32_t imm;
};

int frv_decode(size_t bufsz, const uint8_t* buf, FrvOptions, FrvInst* frv_inst);

// Note: actual format is unstable.
void frv_format(const FrvInst* inst, size_t len, char* buf);

#ifdef __cplusplus
}
#endif

#endif
